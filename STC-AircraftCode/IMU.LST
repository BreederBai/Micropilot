C51 COMPILER V9.01   IMU                                                                   04/30/2017 10:50:26 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE IMU
OBJECT MODULE PLACED IN IMU.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE IMU.C LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <STC15W4K60S4.H>
   2          #include <IMU.H>
   3          #include <math.H>
   4          #define pi 3.14159265f                           
   5          #define Kp 0.8f                        
   6          #define Ki 0.001f                         
   7          #define halfT 0.004f           
   8          float idata q0=1,q1=0,q2=0,q3=0;   
   9          float idata exInt=0,eyInt=0,ezInt=0;  
  10          void IMUupdate(float gx, float gy, float gz, float ax, float ay, float az)
  11          {
  12   1        float idata norm;
  13   1        float idata vx, vy, vz;
  14   1        float idata ex, ey, ez;
  15   1      
  16   1        float idata q0q0 = q0*q0;
  17   1        float idata q0q1 = q0*q1;
  18   1        float idata q0q2 = q0*q2;
  19   1        float idata q0q3 = q0*q3;
  20   1        float idata q1q1 = q1*q1;
  21   1        float idata q1q2 = q1*q2;
  22   1        float idata q1q3 = q1*q3;
  23   1        float idata q2q2 = q2*q2;
  24   1        float idata q2q3 = q2*q3;
  25   1        float idata q3q3 = q3*q3;
  26   1      
  27   1        norm = sqrt(ax*ax + ay*ay + az*az);      
  28   1        ax = ax /norm;
  29   1        ay = ay / norm;
  30   1        az = az / norm;
  31   1                 
  32   1        vx = 2*(q1q3 - q0q2);                                                                                         
  33   1        vy = 2*(q0q1 + q2q3);
  34   1        vz = q0q0 - q1q1 - q2q2 + q3q3 ;
  35   1      
  36   1        ex = (ay*vz - az*vy) ;                                                                
  37   1        ey = (az*vx - ax*vz) ;
  38   1        ez = (ax*vy - ay*vx) ;
  39   1      
  40   1        exInt = exInt + ex * Ki;                                                               
  41   1        eyInt = eyInt + ey * Ki;
  42   1        ezInt = ezInt + ez * Ki;
  43   1      
  44   1        gx = gx + Kp*ex + exInt;                                                                                              
  45   1        gy = gy + Kp*ey + eyInt;
  46   1        gz = gz + Kp*ez + ezInt;                                                                                      
  47   1                                                 
  48   1        q0 = q0 + (-q1*gx - q2*gy - q3*gz)*halfT;
  49   1        q1 = q1 + (q0*gx + q2*gz - q3*gy)*halfT;
  50   1        q2 = q2 + (q0*gy - q1*gz + q3*gx)*halfT;
  51   1        q3 = q3 + (q0*gz + q1*gy - q2*gx)*halfT;
  52   1      
  53   1        norm = sqrt(q0*q0 + q1*q1 + q2*q2 + q3*q3);
  54   1        q0 = q0 / norm;
  55   1        q1 = q1 / norm;
C51 COMPILER V9.01   IMU                                                                   04/30/2017 10:50:26 PAGE 2   

  56   1        q2 = q2 / norm;
  57   1        q3 = q3 / norm;
  58   1      
  59   1        Angle=asin(2*(q0*q2-q1*q3 ))* 57.2957795f; // ¸©Ñö
  60   1        Angley=asin(2*(q0*q1+q2*q3 ))* 57.2957795f; // ºá¹ö
  61   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1915    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      24
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     28      68
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
